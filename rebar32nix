#!/usr/bin/env escript

main([]) ->
    main([<<".">>]);
main([File]) ->
    {ok, Terms} = file:consult(filename:join([File, <<"rebar.lock">>])),
    io:put_chars(nix_derivation(Terms)).

nix_derivation(Lock) ->
    io_lib:format(<<"# Generated with rebar32nix
{ stdenv, rebar3 ? null, writeShellScriptBin }:

with stdenv.lib;

let
  closure = ~s;

  fakeGit = writeShellScriptBin \"git\" \"cat rev || true\"

  linkPackage = name: src: ''
    mkdir -p _build/default/lib/${name}/ebin
    cp -rs ${src}/. $_/..
    echo ${src.rev} > $_/rev
  '';
in

stdenv.mkDerivation {
  name = \"rebar3-release\";
  src = ./.;

  buildInputs = [ fakeGit rebar3 ];

  configurePhase = concatStrings (mapAttrsToList linkPackage closure);
  buildPhase = \"rebar3 release --dev-mode false --include-erts false\";
  installPhase = \"mv _build/default/rel/* $out\";
}
">>, [rebar3_closure(Lock)]).

rebar3_closure([Pkgs]) ->
    Props = lists:map(fun({PName, Meta, Num}) -> {PName, {Meta, Num}} end, Pkgs),
    Names = proplists:get_keys(Props),
    Tuples = lists:map(fun(Name) -> {Name, proplists:get_value(Name, Props)} end, Names),
    ["{", lists:concat(lists:map(fun(X) -> to_fetch(X) end, Tuples)), "}"].

to_fetch({Name, {{git, Url, {ref, Ref}}, _N}}) ->
    io_lib:format("
  ~s = builtins.fetchGit {
    url = \"~s\";
    rev = \"~s\";
  };
", [Name, Url, Ref]).
