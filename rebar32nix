#!/usr/bin/env escript

main(Args) ->
  case main(Args, []) of
    {ok, State} ->
      LockFile = resolve_lockfile(proplists:get_value(dir, State)),
      {ok, Terms} = file:consult(LockFile),
      {ok, _} = to_nix(Terms);
    {error, Reason} ->
      io:format("Error: ~s~n", [Reason]),
      halt(1)
  end.

main([], State) ->
  {ok, State};
main(["--dir", Dir | Rest], State) ->
  main(Rest, [{dir, Dir} | State]);
main([Arg | _Rest], _State) ->
  io:put_chars(standard_error, "Usage: rebar32nix [--dir DIR]\n"),
  {error, io_lib:format("Unknown argument: ~s", [Arg])}.

resolve_lockfile(undefined) ->
  {ok, Cwd} = file:get_cwd(),
  filename:join(Cwd, "rebar.lock");
resolve_lockfile(Dir) ->
  filename:join(Dir, "rebar.lock").

to_nix([Pkgs]) ->
  PkgsProps = lists:map(fun({PName, Meta, Num}) -> {PName, {Meta, Num}} end, Pkgs),
  PkgNames = proplists:get_keys(PkgsProps),
  Tuples = lists:map(fun(Name) -> {Name, proplists:get_value(Name, PkgsProps)} end, PkgNames),
  io:format("{", []),
  lists:map(fun(X) -> to_src_expr(X) end, Tuples),
  io:format("}", []),
  {ok, Tuples}.

to_src_expr({Name, {{pkg, PName, Ver}, _Num}}) ->
  io:format(<<"
    \"~s\" = {
      name = \"~s\";
      type = \"hexpm\";
      version = \"~s\";
    };~n">>, [Name, PName, Ver]),
  ok;
to_src_expr({Name, {{git, Url, {ref, Ref}}, _Num}}) ->
  io:format(<<"
    \"~s\" = {
      type = \"git\";
      url = \"~s\";
      rev = \"~s\";
    };~n">>, [Name, Url, Ref]),
  ok.
