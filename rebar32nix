#!/usr/bin/env escript

resolve_lock(undefined) -> "rebar.lock";
resolve_lock(File) -> File.

main(Args) ->
  case main(Args, []) of
    {ok, State} ->
      {ok, Terms} = file:consult(resolve_lock(proplists:get_value(file, State))),
      io:put_chars(nix_derivation(Terms));
    {error, Reason} ->
      io:format("Error: ~s~n", [Reason]),
      halt(1)
  end.

main([], State) ->
    {ok, State};
main(["-file", File | Rest], State) ->
    main(Rest, [{file, File} | State]);
main([Arg | _Rest], _State) ->
    io:put_chars(standard_error, "Usage: rebar32nix [-file LOCK]\n"),
    {error, io_lib:format("Unknown argument: ~s", [Arg])}.

nix_derivation(Lock) ->
    io_lib:format(<<"
{ stdenv, rebar3, writeShellScriptBin }:

with stdenv.lib;

let
  closure = ~s;

  fakeGit = writeShellScriptBin ''git'' ''cat rev || true'';

  linkPackage = name: src: ''
    mkdir -p _build/default/lib/${name}/ebin
    cp -rs ${src}/. $_/..
    echo ${src.rev} > $_/rev
  '';
in

stdenv.mkDerivation {
  name = ''rebar3-release'';
  src = ./.;

  buildInputs = [ fakeGit rebar3 ];

  configurePhase = concatStrings (mapAttrsToList linkPackage closure);
  buildPhase = ''rebar3 release --dev-mode false --include-erts false'';
  installPhase = ''mv _build/default/rel/* $out'';
}
">>, [rebar3_closure(Lock)]).

rebar3_closure([Pkgs]) ->
    Props = lists:map(fun({PName, Meta, Num}) -> {PName, {Meta, Num}} end, Pkgs),
    Names = proplists:get_keys(Props),
    Tuples = lists:map(fun(Name) -> {Name, proplists:get_value(Name, Props)} end, Names),
    ["{", lists:concat(lists:map(fun(X) -> to_fetch(X) end, Tuples)), "}"].

to_fetch({Name, {{git, Url, {ref, Ref}}, _N}}) ->
    io_lib:format("
  \"~s\" = builtins.fetchGit {
    url = \"~s\";
    rev = \"~s\";
  };
", [Name, Url, Ref]).
